name: üöÄ iOS CI - Banner CollectionView

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: macos-14  # Vers√£o espec√≠fica recomendada para Xcode 16.2
    timeout-minutes: 20
    
    steps:
    - name: üõí Checkout Code
      uses: actions/checkout@v4
      
    - name: üõ†Ô∏è Setup Xcode 16.2
      run: |
        sudo xcode-select -switch /Applications/Xcode_16.2.app/Contents/Developer
        echo "### Xcode Version ###"
        xcodebuild -version
        echo "### Swift Version ###"
        swift --version
      
    - name: üî® Build Project
      run: |
        set -o pipefail && xcodebuild build \
        -project "testecollectionview.xcodeproj" \
        -scheme "testecollectionview" \
        -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
        CODE_SIGNING_ALLOWED=NO | xcpretty -c
      
    - name: üß™ Run UI Tests
      run: |
        set -o pipefail && xcodebuild test \
        -project "testecollectionview.xcodeproj" \
        -scheme "testecollectionview" \
        -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
        CODE_SIGNING_ALLOWED=NO | tee test-results.txt | xcpretty -c --color
      
    - name: üìä Upload Test Results
      uses: actions/upload-artifact@v4  # Vers√£o atualizada
      if: always()
      with:
        name: test-artifacts
        path: |
          test-results.txt
          ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
        retention-days: 5
      
    - name: üìù PR Feedback
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        RESULTS_FILE: ${{ github.workspace }}/test-results.txt
      with:
        script: |
          const fs = require('fs');
          const { SUMMARY_ENV_VAR } = require('@actions/core/lib/summary');
          
          try {
            // Criar resumo executivo
            let summary = `### üìã Resumo dos Testes UI\n`;
            summary += `**Status:** ${process.env.TEST_RESULT || '‚ö†Ô∏è N√£o determinado'}\n\n`;
            
            // Adicionar detalhes se dispon√≠veis
            if (fs.existsSync(process.env.RESULTS_FILE)) {
              const results = fs.readFileSync(process.env.RESULTS_FILE, 'utf8');
              summary += `<details>\n<summary>üìú Log de Testes</summary>\n\n\`\`\`\n${results}\n\`\`\`\n</details>`;
            }
            
            // Postar coment√°rio
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
            // Definir sa√≠da para o passo seguinte
            process.env[SUMMARY_ENV_VAR] = summary;
          } catch (error) {
            console.error('Erro ao processar resultados:', error);
          }
